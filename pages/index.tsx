import { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { GetServerSideProps } from "next";
import { useSession, signIn, signOut } from "next-auth/react";
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';

export default function Home() {
  const [isConnecting, setIsConnecting] = useState(true)
  const [isLogin, setIsLogin] = useState(false)
  const { data: session, status } = useSession();
  const [token, setToken] = useState('')
  useEffect(() => {
    if (session !== undefined) {

      if (session !== null) {
        fetch("/api/auths/signin", {
          method: "POST",
          headers: {
            'content-type': 'application/json'
          },
          body: JSON.stringify({
            username: session.user.email,
            password: session.id
          })
        })
          .then(res => res.json())
          .then(data => {
            setIsLogin(true)
            setIsConnecting(false)

            if (data.statusCode === 401) {
              fetch("/api/auths/signup", {
                method: "POST",
                headers: {
                  'content-type': 'application/json'
                },
                body: JSON.stringify({
                  username: session.user.email,
                  password: session.id,
                  name: session.user.name
                })
              })
            } else {
              setToken(`Bearer ${data.access_token}`)
              handleGetContacts()
            }
          })

      } else setIsConnecting(false)
    }
  }, [session])

  const [rows, setRows] = useState([])
  const handleGetContacts = () => {
    fetch("/api/contacts")
      .then(res => res.json())
      .then(data => {
        setRows(data)
      })
  }

  const handleAddContact = () => {
    fetch("/api/contacts", {
      method: "POST",
      headers: {
        'content-type': 'application/json',
        'Authorization': token,
      },
      body: JSON.stringify({
        "name": "Ted2",
        "phone": "09837830812"
      })
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="fixed w-full p-5 bg-slate-500 text-white">
        {session
          ? <>
            <span>{session.user.name} 您好！</span>
            <button className="bg-sky-500 rounded py-1 px-2 hover:bg-sky-800" onClick={() => signOut()}>登出</button>
          </>
          : <button onClick={() => signIn("google")}>登入</button>}
      </header>
      <main className="container mx-auto h-screen flex flex-col items-center justify-center">
        <button onClick={handleAddContact}>test add</button>
        {isConnecting
          ? null
          : <>
            {!isLogin
              ? <div>您尚未登入</div>
              : <TableContainer component={Paper}>
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                  <TableHead>
                    <TableRow>
                      <TableCell>Name</TableCell>
                      <TableCell align="right">Phone</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {rows.map((row, index) => (
                      <TableRow
                        key={index}
                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                      >
                        <TableCell component="th" scope="row">
                          {row.name}
                        </TableCell>
                        <TableCell align="right">{row.phone}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            }
          </>
        }

      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  return {
    props: {
    },
  };
};
