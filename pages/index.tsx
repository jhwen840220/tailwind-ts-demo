import { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { GetServerSideProps } from "next";
import { useSession, signIn } from "next-auth/react";
import { Fetch, setCookie, getCookie, logOut } from "utils";
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import Data from 'components/Data';

export default function Home() {
  const [isConnecting, setIsConnecting] = useState(true)
  const [isLogin, setIsLogin] = useState(false)
  const { data: session, status } = useSession();
  useEffect(() => {
    if (session !== undefined) {
      if (session !== null) {
        if (!getCookie('token')) {
          fetch("/api/auths/signin", {
            method: "POST",
            headers: {
              'content-type': 'application/json'
            },
            body: JSON.stringify({
              username: session.user.email,
              password: session.id
            })
          })
            .then(res => res.json())
            .then(data => {
              setIsLogin(true)
              setIsConnecting(false)
              handleGetContacts()
              if (data.statusCode === 401) {
                fetch("/api/auths/signup", {
                  method: "POST",
                  headers: {
                    'content-type': 'application/json'
                  },
                  body: JSON.stringify({
                    username: session.user.email,
                    password: session.id,
                    name: session.user.name
                  })
                })
              } else {
                setCookie('token', `Bearer ${data.access_token}`, 1)
              }
            })
        } else {
          setIsLogin(true)
          setIsConnecting(false)
          handleGetContacts()
        }

      } else setIsConnecting(false)
    }
  }, [session])

  const [rows, setRows] = useState([])
  const handleGetContacts = () => {
    Fetch("/api/contacts", null, async res => {
      const data = await res.json()
      setRows(data)
    })
  }

  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const handleAddContact = (postData) => {
    if (postData.name.length && postData.phone.length) {
      Fetch("/api/contacts", {
        method: "POST",
        headers: {
          'content-type': 'application/json',
        },
        body: JSON.stringify(postData)
      }, res => {
        handleGetContacts()
      })
    } else alert("請輸入Name & Phone")
  }

  const handleRemoveContact = id => {
    Fetch(`/api/contacts/${id}`, {
      method: "DELETE"
    }, res => {
      handleGetContacts()
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="fixed w-full p-5 bg-slate-500 text-white">
        {session
          ? <>
            <span>{session.user.name} 您好！</span>
            <button className="bg-sky-500 rounded py-1 px-2 hover:bg-sky-800" onClick={() => logOut()}>登出</button>
          </>
          : <button className="bg-sky-500 rounded py-1 px-2 hover:bg-sky-800" onClick={() => signIn("google")}>登入</button>}
      </header>
      <main className="container mx-auto h-screen flex flex-col items-center justify-center">
        {isConnecting
          ? null
          : <>
            {!isLogin
              ? <div>您尚未登入</div>
              :
              <>
                <div className="p-3 flex items-center">
                  <span>Name:</span>
                  <input className="mx-2" type={"text"} value={name} onChange={e => setName(e.target.value)} />
                  <span>Phone:</span>
                  <input className="mx-2" type={"text"} value={phone} onChange={e => setPhone(e.target.value)} />
                  <button className="bg-sky-500 rounded py-1 px-2 hover:bg-sky-800" onClick={() => { handleAddContact({ name, phone }) }}>新增</button>
                </div>
                <Paper sx={{ width: '500px' }}>
                  <TableContainer sx={{ maxHeight: 440 }}>
                    <Table stickyHeader aria-label="sticky table">
                      <TableHead>
                        <TableRow>
                          <TableCell>Name</TableCell>
                          <TableCell align="right">Phone</TableCell>
                          <TableCell>Actions</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {rows.map(row => (
                          <TableRow
                            key={row.id}
                            sx={{ backgroundColor: '#bbb', '&:last-child td, &:last-child th': { border: 0 } }}
                          >
                            <Data id={row.id} name={row.name} phone={row.phone} onRemove={id => { handleRemoveContact(id) }} onEdit={data => { handleAddContact(data) }} />
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Paper>
              </>
            }
          </>
        }
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  return {
    props: {
    },
  };
};
